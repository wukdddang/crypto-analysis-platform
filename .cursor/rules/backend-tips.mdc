---
description:
globs:
alwaysApply: false
---

나만의 비트코인 익스플로러 만들기: NestJS 백엔드 설계 TODO 리스트 🚀
0단계: 프로젝트 설정 및 비전 수립
[ ] MVP(최소 기능 제품) 정의: 내 익스플로러의 첫 버전이 갖춰야 할 단 하나의 핵심 기능은 무엇인가?

질문: 사용자가 '트랜잭션 해시(ID)'를 입력했을 때, 해당 거래의 상세 정보를 보여주는 것부터 시작할까? 아니면 '지갑 주소'를 입력했을 때, 잔액과 거래 내역을 보여주는 것부터 할까?

[ ] 기술 환경 설정: NestJS 프로젝트를 생성하고, 필요한 기본 설정을 마친다.

질문: 환경 변수(예: 데이터베이스 접속 정보, API 키)는 어떻게 안전하고 효율적으로 관리할까? (@nestjs/config 사용을 고려해 보자.)

1단계: 핵심 데이터 파이프라인 구축 (블록체인과의 연결)
[ ] 데이터 소스 결정: 비트코인 블록체인의 데이터는 어디서 가져올 것인가?

질문: 내 컴퓨터에 직접 비트코인 코어 노드를 설치하고 운영할 것인가? 아니면 BlockCypher, Infura 같은 외부 API 서비스를 이용할 것인가? 각각의 장단점(비용, 안정성, 구현 난이도)은 무엇일까?

[ ] 데이터 수집 전략 수립: 새로운 블록이 생성될 때마다 어떻게 감지하고 내 시스템으로 가져올 것인가?

질문: 몇 초에 한 번씩 주기적으로 새로운 블록이 있는지 확인하는 '폴링(Polling)' 방식으로 구현할까? 이를 위해 NestJS의 어떤 기능을 사용하면 좋을까? (@nestjs/schedule이 좋은 후보일까?)

[ ] 데이터 스키마 정의: 가져온 블록과 트랜잭션 데이터에서 어떤 정보들을 추출해서 사용할 것인가?

질문: 블록에서는 블록 높이, 타임스탬프, 채굴자 정보 등이 필요할까? 트랜잭션에서는 입력(inputs), 출력(outputs), 수수료, 금액 정보가 필요할까? 이 정보들의 데이터 타입(숫자, 문자열, 날짜)은 무엇으로 할까?

2단계: 데이터베이스 모델링 및 저장
[ ] 데이터베이스 선택: 추출하고 가공한 데이터를 어디에 저장할 것인가?

질문: 관계형 데이터베이스(RDBMS, 예: PostgreSQL)가 좋을까, NoSQL(예: MongoDB)이 좋을까? 비트코인의 UTXO 모델은 어떤 데이터베이스 구조와 더 잘 어울릴까? 그 이유는 무엇인가?

[ ] 테이블(또는 컬렉션) 설계: 선택한 데이터베이스에 어떤 테이블들을 만들 것인가?

질문: blocks 테이블과 transactions 테이블은 어떻게 관계를 맺어야 할까? 트랜잭션의 입력과 출력을 표현하기 위한 별도의 테이블(tx_inputs, tx_outputs)이 필요할까? 특정 지갑 주소의 잔액을 빠르게 조회하려면 어떤 추가적인 테이블이나 컬럼이 필요할까?

[ ] ORM 설정: NestJS와 데이터베이스를 어떻게 연결할 것인가?

질문: TypeORM과 Prisma 중 어떤 ORM(Object-Relational Mapper)을 사용할까? 두 도구의 장단점을 비교해 보고 내 프로젝트에 더 적합하다고 생각하는 이유는 무엇인가?

3단계: REST API 구현
[ ] API 엔드포인트 설계: 외부(프론트엔드)에서 내 데이터를 요청할 수 있는 창구를 설계한다.

질문: '블록', '트랜잭션', '주소'라는 리소스를 중심으로 어떤 엔드포인트들이 필요할까? (예: GET /blocks/:height, GET /transactions/:txid, GET /addresses/:address)

[ ] 요청/응답 데이터 형식 정의: 각 엔드포인트는 어떤 요청 값을 받고, 어떤 형태의 JSON 데이터를 응답할 것인가?

질문: 대량의 거래 내역을 한 번에 모두 보내는 것은 비효율적이다. 어떻게 '페이지네이션(Pagination)'을 구현할까? (?page=1&limit=20 같은 쿼리 파라미터 사용)

[ ] 유효성 검사(Validation): 잘못된 형식의 요청(예: 유효하지 않은 지갑 주소)은 어떻게 처리하고 사용자에게 알려줄까?

질문: NestJS의 class-validator와 Pipe를 이용해 요청 파라미터나 쿼리를 어떻게 검증할 수 있을까?

4단계: 첫 배포 및 자동화
[ ] 배포 환경 선택: 내 NestJS 애플리케이션을 인터넷 세상의 어디에서 실행시킬 것인가?

질문: AWS EC2 같은 가상 서버를 직접 설정할까? 아니면 Heroku, Render 같은 PaaS(Platform as a Service)를 이용할까? Docker를 사용해 내 앱을 컨테이너로 만드는 것의 이점은 무엇일까?

[ ] CI/CD 파이프라인 구축: 코드를 GitHub에 푸시했을 때, 자동으로 테스트와 배포가 이루어지게 만들 수 있을까?

질문: GitHub Actions를 이용해 어떤 단계(설치 -> 빌드 -> 테스트 -> 배포)의 자동화 파이프라인을 구성할 수 있을까?

5단계: 테스트 및 리팩토링
[ ] 테스트 전략 수립: 내 코드의 안정성을 어떻게 증명할 것인가?

질문: 순수한 비즈니스 로직(예: 특정 주소의 잔액 계산 로직)을 테스트하는 '단위 테스트(Unit Test)'는 어떻게 작성할까? API 엔드포인트가 의도한 대로 정확한 데이터를 반환하는지 확인하는 '통합 테스트(Integration Test)'는 어떻게 작성할까?

[ ] 코드 품질 개선: 더 읽기 쉽고, 유지보수하기 좋은 코드로 개선할 수 있을까?

질문: 하나의 함수나 클래스가 너무 많은 일을 하고 있지는 않은가? 비슷한 코드가 여러 곳에 중복되어 있지는 않은가? 변수나 함수의 이름은 그 역할을 명확하게 설명하는가?

6단계: 운영 및 모니터링
[ ] 로깅(Logging) 시스템 구축: 내 서버에서 무슨 일이 일어나고 있는지 어떻게 기록을 남길까?

질문: 어떤 종류의 로그(API 요청, 에러, 데이터 수집 성공/실패 등)를 남겨야 할까? NestJS의 내장 로거(Logger)를 어떻게 커스터마이징할 수 있을까?

[ ] 상태 모니터링: 내 서버가 건강하게 살아있는지 어떻게 확인할까?

질문: 외부 모니터링 서비스가 주기적으로 호출할 수 있는 GET /health 같은 헬스 체크(Health Check) 엔드포인트를 만들 필요가 있을까? 서버의 CPU나 메모리 사용량은 어떻게 추적할 수 있을까?

[ ] 백업 및 복구 계획: 만약 데이터베이스가 손상되거나 서버가 사라진다면 어떻게 될까?

질문: 데이터베이스를 주기적으로 백업하는 정책이 필요한가? 블록체인 데이터는 원본이 공개되어 있으니, 다시 처음부터 데이터를 수집하는 데 시간은 얼마나 걸릴까?

이 질문들에 대한 답을 찾아가는 여정이 곧 실력 향상의 과정입니다. 행운을 빕니다!
